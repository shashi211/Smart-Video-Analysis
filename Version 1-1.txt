#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int, char**)
{
	VideoCapture cap("vtest.avi");
	cap.set(CV_CAP_PROP_FRAME_WIDTH, 320);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, 240);

	Mat img;
	
	HOGDescriptor hog;
	hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());

	namedWindow("video capture", CV_WINDOW_NORMAL);
	while (true)
	{
		cap >> img;
		Rect border(150, 150, 500, 300);
		rectangle(img, border, Scalar(0, 255, 0), 2);
		
		vector<Rect> found, found_filtered;
		hog.detectMultiScale(img, found, 0, Size(8, 8), Size(32, 32), 1.2, 2);
		size_t i, j;
		for (i = 0; i<found.size(); i++)
		{
			Rect r = found[i];
			for (j = 0; j<found.size(); j++)
				if (j != i && (r & found[j]) == r)
					break;
			if (j == found.size())
				found_filtered.push_back(r);
		}
		for (i = 0; i < found_filtered.size(); i++)
		{
			Rect r = found_filtered[i];
			if (r.x >= 180 && r.x <= 600 && r.y >= 130 && r.y <= 650)
			{
				r.x += cvRound(r.width*0.1);
				r.width = cvRound(r.width*0.8);
				r.y += cvRound(r.height*0.06);
				r.height = cvRound(r.height*0.9);
				rectangle(img, r.tl(), r.br(), cv::Scalar(255, 0, 0), 2);
			}
		}
		imshow("Video", img);
		char c = (char)waitKey(1);
		if (c == 27)
			break;
	}
	return 0;
}